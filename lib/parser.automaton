State 0:
## Known stack suffix:
##
## LR(1) items:
prog' -> . prog [ # ]
## Transitions:
-- On LPAREN shift to state 1
-- On LET shift to state 13
-- On ID shift to state 2
-- On prog shift to state 26
-- On expr shift to state 27
-- On declaration shift to state 28
## Reductions:

State 1:
## Known stack suffix:
## LPAREN
## LR(1) items:
expr -> LPAREN . expr RPAREN [ RPAREN LPAREN LET ID EQUAL EOF ]
## Transitions:
-- On LPAREN shift to state 1
-- On ID shift to state 2
-- On expr shift to state 9
## Reductions:

State 2:
## Known stack suffix:
## ID
## LR(1) items:
expr -> ID . function_r [ RPAREN LPAREN LET ID EQUAL EOF ]
## Transitions:
-- On LPAREN shift to state 3
-- On ID shift to state 4
-- On function_r shift to state 8
## Reductions:

State 3:
## Known stack suffix:
## LPAREN
## LR(1) items:
function_r -> LPAREN . function_r RPAREN [ RPAREN LPAREN LET ID EQUAL EOF ]
## Transitions:
-- On LPAREN shift to state 3
-- On ID shift to state 4
-- On function_r shift to state 6
## Reductions:

State 4:
## Known stack suffix:
## ID
## LR(1) items:
function_r -> ID . function_r [ RPAREN LPAREN LET ID EQUAL EOF ]
function_r -> ID . [ RPAREN LPAREN LET ID EQUAL EOF ]
## Transitions:
-- On LPAREN shift to state 3
-- On ID shift to state 4
-- On function_r shift to state 5
## Reductions:
-- On RPAREN LPAREN LET EQUAL EOF
--   reduce production function_r -> ID
** Conflict on LPAREN

State 5:
## Known stack suffix:
## ID function_r
## LR(1) items:
function_r -> ID function_r . [ RPAREN LPAREN LET ID EQUAL EOF ]
## Transitions:
## Reductions:
-- On RPAREN LPAREN LET ID EQUAL EOF
--   reduce production function_r -> ID function_r

State 6:
## Known stack suffix:
## LPAREN function_r
## LR(1) items:
function_r -> LPAREN function_r . RPAREN [ RPAREN LPAREN LET ID EQUAL EOF ]
## Transitions:
-- On RPAREN shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## LPAREN function_r RPAREN
## LR(1) items:
function_r -> LPAREN function_r RPAREN . [ RPAREN LPAREN LET ID EQUAL EOF ]
## Transitions:
## Reductions:
-- On RPAREN LPAREN LET ID EQUAL EOF
--   reduce production function_r -> LPAREN function_r RPAREN

State 8:
## Known stack suffix:
## ID function_r
## LR(1) items:
expr -> ID function_r . [ RPAREN LPAREN LET ID EQUAL EOF ]
## Transitions:
## Reductions:
-- On RPAREN LPAREN LET ID EQUAL EOF
--   reduce production expr -> ID function_r

State 9:
## Known stack suffix:
## LPAREN expr
## LR(1) items:
expr -> expr . EQUAL expr [ RPAREN EQUAL ]
expr -> LPAREN expr . RPAREN [ RPAREN LPAREN LET ID EQUAL EOF ]
## Transitions:
-- On RPAREN shift to state 10
-- On EQUAL shift to state 11
## Reductions:

State 10:
## Known stack suffix:
## LPAREN expr RPAREN
## LR(1) items:
expr -> LPAREN expr RPAREN . [ RPAREN LPAREN LET ID EQUAL EOF ]
## Transitions:
## Reductions:
-- On RPAREN LPAREN LET ID EQUAL EOF
--   reduce production expr -> LPAREN expr RPAREN

State 11:
## Known stack suffix:
## expr EQUAL
## LR(1) items:
expr -> expr EQUAL . expr [ RPAREN LPAREN LET ID EQUAL EOF ]
## Transitions:
-- On LPAREN shift to state 1
-- On ID shift to state 2
-- On expr shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## expr EQUAL expr
## LR(1) items:
expr -> expr . EQUAL expr [ RPAREN LPAREN LET ID EQUAL EOF ]
expr -> expr EQUAL expr . [ RPAREN LPAREN LET ID EQUAL EOF ]
## Transitions:
## Reductions:
-- On RPAREN LPAREN LET ID EQUAL EOF
--   reduce production expr -> expr EQUAL expr

State 13:
## Known stack suffix:
## LET
## LR(1) items:
declaration -> LET . PROVE function_l EQUAL expr [ LPAREN LET ID EOF ]
## Transitions:
-- On PROVE shift to state 14
## Reductions:

State 14:
## Known stack suffix:
## LET PROVE
## LR(1) items:
declaration -> LET PROVE . function_l EQUAL expr [ LPAREN LET ID EOF ]
## Transitions:
-- On ID shift to state 15
-- On function_l shift to state 16
## Reductions:

State 15:
## Known stack suffix:
## ID
## LR(1) items:
function_l -> ID . [ LPAREN ID EQUAL ]
## Transitions:
## Reductions:
-- On LPAREN ID EQUAL
--   reduce production function_l -> ID

State 16:
## Known stack suffix:
## LET PROVE function_l
## LR(1) items:
declaration -> LET PROVE function_l . EQUAL expr [ LPAREN LET ID EOF ]
function_l -> function_l . type_annot [ LPAREN ID EQUAL ]
## Transitions:
-- On LPAREN shift to state 17
-- On ID shift to state 18
-- On EQUAL shift to state 23
-- On type_annot shift to state 25
## Reductions:

State 17:
## Known stack suffix:
## LPAREN
## LR(1) items:
type_annot -> LPAREN . type_annot RPAREN [ RPAREN LPAREN ID EQUAL ]
## Transitions:
-- On LPAREN shift to state 17
-- On ID shift to state 18
-- On type_annot shift to state 21
## Reductions:

State 18:
## Known stack suffix:
## ID
## LR(1) items:
type_annot -> ID . COLON ID [ RPAREN LPAREN ID EQUAL ]
## Transitions:
-- On COLON shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## ID COLON
## LR(1) items:
type_annot -> ID COLON . ID [ RPAREN LPAREN ID EQUAL ]
## Transitions:
-- On ID shift to state 20
## Reductions:

State 20:
## Known stack suffix:
## ID COLON ID
## LR(1) items:
type_annot -> ID COLON ID . [ RPAREN LPAREN ID EQUAL ]
## Transitions:
## Reductions:
-- On RPAREN LPAREN ID EQUAL
--   reduce production type_annot -> ID COLON ID

State 21:
## Known stack suffix:
## LPAREN type_annot
## LR(1) items:
type_annot -> LPAREN type_annot . RPAREN [ RPAREN LPAREN ID EQUAL ]
## Transitions:
-- On RPAREN shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## LPAREN type_annot RPAREN
## LR(1) items:
type_annot -> LPAREN type_annot RPAREN . [ RPAREN LPAREN ID EQUAL ]
## Transitions:
## Reductions:
-- On RPAREN LPAREN ID EQUAL
--   reduce production type_annot -> LPAREN type_annot RPAREN

State 23:
## Known stack suffix:
## LET PROVE function_l EQUAL
## LR(1) items:
declaration -> LET PROVE function_l EQUAL . expr [ LPAREN LET ID EOF ]
## Transitions:
-- On LPAREN shift to state 1
-- On ID shift to state 2
-- On expr shift to state 24
## Reductions:

State 24:
## Known stack suffix:
## LET PROVE function_l EQUAL expr
## LR(1) items:
declaration -> LET PROVE function_l EQUAL expr . [ LPAREN LET ID EOF ]
expr -> expr . EQUAL expr [ LPAREN LET ID EQUAL EOF ]
## Transitions:
-- On EQUAL shift to state 11
## Reductions:
-- On LPAREN LET ID EOF
--   reduce production declaration -> LET PROVE function_l EQUAL expr

State 25:
## Known stack suffix:
## function_l type_annot
## LR(1) items:
function_l -> function_l type_annot . [ LPAREN ID EQUAL ]
## Transitions:
## Reductions:
-- On LPAREN ID EQUAL
--   reduce production function_l -> function_l type_annot

State 26:
## Known stack suffix:
## prog
## LR(1) items:
prog' -> prog . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept prog

State 27:
## Known stack suffix:
## expr
## LR(1) items:
declaration -> expr . [ LPAREN LET ID EOF ]
expr -> expr . EQUAL expr [ LPAREN LET ID EQUAL EOF ]
## Transitions:
-- On EQUAL shift to state 11
## Reductions:
-- On LPAREN LET ID EOF
--   reduce production declaration -> expr

State 28:
## Known stack suffix:
## declaration
## LR(1) items:
prog -> declaration . prog [ # ]
prog -> declaration . EOF [ # ]
## Transitions:
-- On LPAREN shift to state 1
-- On LET shift to state 13
-- On ID shift to state 2
-- On EOF shift to state 29
-- On prog shift to state 30
-- On expr shift to state 27
-- On declaration shift to state 28
## Reductions:

State 29:
## Known stack suffix:
## declaration EOF
## LR(1) items:
prog -> declaration EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production prog -> declaration EOF

State 30:
## Known stack suffix:
## declaration prog
## LR(1) items:
prog -> declaration prog . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production prog -> declaration prog

